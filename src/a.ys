#
# This program was compiled using RPNcompiler, by Scott Bennett
#
# Execution begins at address 0
	.pos 0
init:	irmovl Stack, %esp	# Set up stack pointer
	irmovl Stack, %ebp	# Set up base pointer
	jmp Main		# Execute main program

# Data section
	.align 4
depth:	.long 0x3		# Keeps track of the RPN stack depth

EDIV:		.long 0x01	# Divide by 0 errno
ESTACK:		.long 0x02	# Depth of RPN stack too shallow errno
ESTACKFULL:	.long 0x04	# Depth of RPN stack too high errno

#
# Main function
#
Main:
	# The RPN stack is initially empty, so initialize depth to zero
	irmovl depth, %edi	# %edi holds the address of depth
	mrmovl (%edi), %edx	# %edx holds the value of depth
	xorl %edx, %edx		# zero the register
	rmmovl %edx, (%edi)	# depth = 0

	# [PUSH]
	# push the number 3 onto the stack
	irmovl $3, %ecx
	pushl %ecx

	# increment stack depth because there's a new entry
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $1, %ecx
	addl %ecx, %edx		# depth++
	rmmovl %edx, (%edi)	# store value

	# [PUSH]
	# push the number 2 onto the stack
	irmovl $2, %ecx
	pushl %ecx

	# increment stack depth because there's a new entry
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $1, %ecx
	addl %ecx, %edx		# depth++
	rmmovl %edx, (%edi)	# store value

	# [PUSH]
	# push the number 1 onto the stack
	irmovl $1, %ecx
	pushl %ecx

	# increment stack depth because there's a new entry
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $1, %ecx
	addl %ecx, %edx		# depth++
	rmmovl %edx, (%edi)	# store value

	# [MINUS]
	# ensure there are two arguments on the stack
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $2, %ecx
	subl %ecx, %edx
	jl stack_error		# goto stack_error if depth < 2

	# pop two values
	popl %ecx
	popl %ebx

	# subtract
	subl %ecx, %ebx

	# push result onto stack
	pushl %ebx

	# decrement stack depth by one
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $-1, %ecx
	addl %ecx, %edx		# depth--
	rmmovl %edx, (%edi)	# store value

# Footer section:

	# Check that only one number is left on the stack
	mrmovl (%edi), %edx	# %edx = depth
	irmovl $1, %ecx
	subl %ecx, %edx
	jne stack_too_full	# goto stack_too_full if depth != 1

	# Pop the result off the stack and return in %eax
	popl %eax

	# print result (only the registers)
	call $5	# dump
	halt

# Error conditions section:

#
# Division by 0 was attempted
#
divide_by_zero:
	irmovl EDIV, %edi	# %edi holds address of EDIV errno
	jmp set_code_and_exit

#
# Not enough operands on the RPN stack for an operation
# (For example: '1 +', or '3 2 % -')
#
stack_error:
	irmovl ESTACK, %edi	# %edi holds address of ESTACK errno
	jmp set_code_and_exit

#
# RPN stack has too many numbers on it at the end of a program
# (For example: '3 2 1 +')
#
stack_too_full:
	irmovl ESTACKFULL, %edi	# %edi holds address of ESTACKFULL errno
	jmp set_code_and_exit

#
# Store the error code in %esi and terminate
#
set_code_and_exit:
	mrmovl (%edi), %esi	# %esi holds error codes
	xorl %edi, %edi		# clear %edi
	call $1	# dump
	halt

	# Stack starts at the highest memory location
	.pos 0xffc
Stack:
