#
# This program was compiled using RPNcompiler, by Scott Bennett
#
# Execution begins at address 0
	.pos 0
init:	irmovl Stack, %esp	# Set up stack pointer
	irmovl Stack, %ebp	# Set up base pointer
	jmp Main		# Execute main program

# Data section
	.align 4
depth:	.long 0x3		# Keeps track of the RPN stack depth
x:	.long 0x0		# left-hand operand (val1)
y:	.long 0x0		# right-hand operand (val2)
result_is_neg:	.long 0x0	# bool: result should be negative

EDIV:		.long 0x01	# Divide by 0 errno
ESTACK:		.long 0x02	# Depth of RPN stack too shallow errno
ESTACKFULL:	.long 0x04	# Depth of RPN stack too high errno

### Math Constants ###
INT_MIN:	.long 0x80000000
INT_MAX:	.long 0x7fffffff

#
# Main function
#
Main:
	# The RPN stack is initially empty, so initialize depth to zero
	irmovl depth, %esi	# %esi holds the address of depth
	mrmovl (%esi), %edx	# %edx holds the value of depth
	xorl %edx, %edx		# zero the register
	rmmovl %edx, (%esi)	# depth = 0
	xorl %edi, %edi		# zero %edi since it holds error codes

	# [PUSH]
	# push the number 7 onto the stack
	irmovl $7, %ecx
	pushl %ecx

	# increment stack depth because there's a new entry
	mrmovl (%esi), %edx	# %edx = depth
	irmovl $1, %ecx
	addl %ecx, %edx		# depth++
	rmmovl %edx, (%esi)	# store value

	# [DUP]
	# ensure there is an argument on the stack to duplicate
	mrmovl (%esi), %edx	# %edx = depth
	irmovl $1, %ecx
	subl %ecx, %edx
	jl stack_error		# goto stack_error if depth < 1

	# pop the top value
	popl %ebx

	# push the value twice to duplicate it
	pushl %ebx
	pushl %ebx

	# increment stack depth because there's a new entry
	mrmovl (%esi), %edx	# %edx = depth
	irmovl $1, %ecx
	addl %ecx, %edx		# depth++
	rmmovl %edx, (%esi)	# store value

# Footer section:

	# Check that only one number is left on the stack
	mrmovl (%esi), %edx	# %edx = depth
	irmovl $1, %ecx
	subl %ecx, %edx
	jne stack_too_full	# goto stack_too_full if depth != 1

	# Pop the result off the stack and return in %eax
	popl %eax

	# print result (only the registers)
	call $5	# dump hack
	halt

# Helper subroutines:
	# Compute the absolute value of x (*doesn't work on INT_MIN yet*)
	# int Abs(int x)
Abs:
	pushl %ebp		# save %ebp
	rrmovl %esp, %ebp
	pushl %ecx		# save %ecx
	mrmovl 8(%ebp), %eax	# %eax = x
	irmovl $0, %ecx
	subl %eax, %ecx		# %ecx = 0 - x
	cmovg %ecx, %eax	# if (0 - x > 0) then x = x * -1
	popl %ecx		# restore %ecx
Abs_done:
	popl %ebp		# restore %ebp
	ret

	# Determine if the result of a multiplication or division
	# operation will be negative.
	# Returns 1 if result should be negative; 0 if positive
	# int WillBeNeg(int x, int y)
WillBeNeg:
	pushl %ebp		# save %ebp
	rrmovl %esp, %ebp
	pushl %ecx		# save %ecx
	pushl %edx		# save %edx
	pushl %ebx		# save %ebx
	irmovl $0, %eax		# assume the result won't be negative
	mrmovl 8(%ebp), %edx	# %edx = x
	mrmovl 12(%ebp), %ecx	# %ecx = y
	irmovl $1, %ebx
	xorl %edx, %ecx		# if (%ecx < 0) then x and y have opposite signs
	cmovl %ebx, %eax	# return 1 if result will be negative
	popl %ebx		# restore %ebx
	popl %edx		# restore %edx
	popl %ecx		# restore %ecx
	popl %ebp		# restore %ebp
	ret

# Error conditions section:

#
# Division by 0 was attempted
#
divide_by_zero:
	irmovl EDIV, %ebx	# %ebx holds address of EDIV errno
	jmp set_code_and_exit

#
# Not enough operands on the RPN stack for an operation
# (For example: '1 +', or '3 2 % -')
#
stack_error:
	irmovl ESTACK, %ebx	# %ebx holds address of ESTACK errno
	jmp set_code_and_exit

#
# RPN stack has too many numbers on it at the end of a program
# (For example: '3 2 1 +')
#
stack_too_full:
	irmovl ESTACKFULL, %ebx	# %ebx holds address of ESTACKFULL errno
	jmp set_code_and_exit

#
# Store the error code in %edi and terminate
#
set_code_and_exit:
	mrmovl (%ebx), %edi	# %edi holds error codes
	xorl %ebx, %ebx		# clear %ebx
	irmovl $-1, %esi	# set %esi to -1 to also indicate error
	call $1	# dump
	halt

	# Stack starts at the highest memory location
	.pos 0xffc
Stack:
